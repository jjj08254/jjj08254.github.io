<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JS Reference VS Copy</title>
</head>
<body>

  <script>
    // start with strings, numbers and booleans
    var age  = 100;
    var age2 = age;

    age = 200;

    var name = 'wes';
    var name2 = name;

    // name = 'wesly'
    // Let's say we have an array
    const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];

    // and we want to make a copy of it.
    var team = players;

    // You might think we can just do something like this:
    team[3] = 'Lus'; 
        // it's different than strings and numbers
        // the value will affect players!!!!
        // CAN'T DO THIS!

    // however what happens when we update that array?

    // now here is the problem!

    // oh no - we have edited the original array too!

    // Why? It's because that is an array reference, not an array copy. They both point to the same array!

    // So, how do we fix this? We take a copy instead!
    var team2 = players.slice();
       // The slice() method returns the selected elements in an array, 
       // as a new array object.
       // slice(a,b) => starts from index a, and ends at b-1 (b is not included)

    // one way

    // or create a new array and concat the old one in
    var team3 = [].concat(players);

    // or use the new ES6 Spread
    var team4 = [...players];

    var team5 = Array.from(players);

    // now when we update it, the original one isn't changed

    // The same thing goes for objects, let's say we have a person object

    // with Objects
    const person = {
      name: 'Wes Bos',
      age: 80
    };

    // and think we make a copy:
    var captain = person;
    captain.number = 99; //CAN'T DO THIS!

    // how do we take a copy instead?
    var cap2 = Object.assign({},person, {number: 99});

    // We will hopefully soon see the object ...spread
    var cap3 = {...person}

    // Things to note - this is only 1 level deep - both for Arrays and Objects. 
    // lodash has a cloneDeep method, but you should think twice before using it.
    const wes = {
      name: 'wes',
      age: 100,
      social: {
        twitter: '@wesbos',
        facebook: 'jack.develop'
      }
    }


    const dev = {...wes}
    const dev2 = JSON.parse(JSON.stringify(wes));
  </script>

</body>
</html>
