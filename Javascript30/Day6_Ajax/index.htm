<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>States/Cities ðŸ‘€</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>

  <form class="search-form">
    <input type="text" class="search" placeholder="City or State">
    <ul class="suggestions">
      <li>Filter for a city</li>
      <li>or a state</li>
    </ul>
  </form>
<script>
const endpoint = 'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json';

var cities = []; // new array, whereas {} is empty object

// Data will come back from the fetch
fetch(endpoint)  // fetch return a 'Promise'
  .then(blob => blob.json()) // We can't use JSON.parse since it's a raw data
      // return another "promise"
  .then(data => cities.push(...data)) // We can use 'cities = data' --> cities becomes 'array'
      // push data(argument) into cities(array). ex. cities.push(1,2,3,4) => cities = [1,2,3,4]
      // sice dada is an array, we want to sperate it into individual arguments, => use ...data

  function findMatches(wordToMatch, cities){
    return cities.filter(place => {
      // we need to figure out if the city or state matches what was searched
      var regex = new RegExp(wordToMatch, 'gi'); // Same as /wordToMatch/gi
        // RegExp is used for matching text with a pattrern
        // g: used to perform a global match (find all matches rather than stopping after the first match).
        // i: used to perform case-insensitive matching.
      return place.city.match(regex) || place.state.match(regex);
    });
  }

  // The following function is used to display comma for numbers 
  function numberwithCommas(x){
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }

  function displayMatches(){
    var matchArray = findMatches(this.value, cities);
    var html = matchArray.map(place => {
      var regex = new RegExp(this.value,'gi');
      var cityName = place.city.replace(regex, `<span class='hl'>${this.value}</span>`);
        // use 'b' to replace 'a'
      var stateName = place.state.replace(regex, `<span class='hl'>${this.value}</span>`);
      return `
        <li>
          <span class='name'>${cityName}, ${stateName}</span>
          <span class='population'>${numberwithCommas(place.population)}</span>
        </li>
      `;
    }).join(''); // the map will return an array -> join(): return a string
    // join(): string w/ comma, join(''): string w/ no comma between, join('-'): string w/ "-"
    suggestions.innerHTML = html;
  }

  var searchInput = document.querySelector('.search');
  var suggestions = document.querySelector('.suggestions');

  searchInput.addEventListener('change', displayMatches);
  searchInput.addEventListener('keyup', displayMatches);
    // trigger whenever typing anything
</script>
</body>
</html>
